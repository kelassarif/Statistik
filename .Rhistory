stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
setwd("C:/Users/U728217/Desktop/2024Statistik") #sesuaikan dengan komputer masing-masing
library(dplyr)
library(tidyr)
library(readr)
library(jsonlite)
library(writexl)
library(mapview)
library(osmdata)
library(ggplot2)
library(car)
Semarang <- read.csv("Semarang.csv")
str(Semarang) #Cek struktur data setiap variabel
# SD
Fasilitas_SD <- read_csv("Fasilitas SD.csv")
Fasilitas_SD <- Fasilitas_SD %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SD_clean <- Fasilitas_SD[complete.cases(Fasilitas_SD$latitude), ]
Fasilitas_SD_clean_filtered <- Fasilitas_SD_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMP
Fasilitas_SMP <- read_csv("Fasilitas SMP.csv")
Fasilitas_SMP <- Fasilitas_SMP %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMP_clean <- Fasilitas_SMP[complete.cases(Fasilitas_SMP$latitude), ]
Fasilitas_SMP_clean_filtered <- Fasilitas_SMP_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMA
Fasilitas_SMA <- read_csv("Fasilitas SMA.csv")
Fasilitas_SMA <- Fasilitas_SMA %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMA_clean <- Fasilitas_SMA[complete.cases(Fasilitas_SMA$latitude), ]
Fasilitas_SMA_clean_filtered <- Fasilitas_SMA_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
setwd("C:/Users/U728217/Desktop/2024Statistik") #sesuaikan dengan komputer masing-masing
library(dplyr)
library(tidyr)
library(readr)
library(jsonlite)
library(writexl)
library(mapview)
library(osmdata)
library(ggplot2)
library(car)
Semarang <- read.csv("Semarang.csv")
str(Semarang) #Cek struktur data setiap variabel
# SD
Fasilitas_SD <- read_csv("Fasilitas SD.csv")
Fasilitas_SD <- Fasilitas_SD %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SD_clean <- Fasilitas_SD[complete.cases(Fasilitas_SD$latitude), ]
Fasilitas_SD_clean_filtered <- Fasilitas_SD_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMP
Fasilitas_SMP <- read_csv("Fasilitas SMP.csv")
Fasilitas_SMP <- Fasilitas_SMP %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMP_clean <- Fasilitas_SMP[complete.cases(Fasilitas_SMP$latitude), ]
Fasilitas_SMP_clean_filtered <- Fasilitas_SMP_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMA
Fasilitas_SMA <- read_csv("Fasilitas SMA.csv")
Fasilitas_SMA <- Fasilitas_SMA %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMA_clean <- Fasilitas_SMA[complete.cases(Fasilitas_SMA$latitude), ]
Fasilitas_SMA_clean_filtered <- Fasilitas_SMA_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
setwd("C:/Users/U728217/Desktop/2024Statistik") #sesuaikan dengan komputer masing-masing
library(dplyr)
library(tidyr)
library(readr)
library(jsonlite)
library(writexl)
library(mapview)
library(osmdata)
library(ggplot2)
library(car)
Semarang <- read.csv("Semarang.csv")
str(Semarang) #Cek struktur data setiap variabel
# SD
Fasilitas_SD <- read_csv("Fasilitas SD.csv")
Fasilitas_SD <- Fasilitas_SD %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SD_clean <- Fasilitas_SD[complete.cases(Fasilitas_SD$latitude), ]
Fasilitas_SD_clean_filtered <- Fasilitas_SD_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMP
Fasilitas_SMP <- read_csv("Fasilitas SMP.csv")
Fasilitas_SMP <- Fasilitas_SMP %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMP_clean <- Fasilitas_SMP[complete.cases(Fasilitas_SMP$latitude), ]
Fasilitas_SMP_clean_filtered <- Fasilitas_SMP_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMA
Fasilitas_SMA <- read_csv("Fasilitas SMA.csv")
Fasilitas_SMA <- Fasilitas_SMA %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMA_clean <- Fasilitas_SMA[complete.cases(Fasilitas_SMA$latitude), ]
Fasilitas_SMA_clean_filtered <- Fasilitas_SMA_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
SMP <- jarak_terdekat(Fasilitas_SMP_clean_filtered, "SMP")
SMA <- jarak_terdekat(Fasilitas_SMA_clean_filtered, "SMA")
# Library
library(dplyr)
library(tidyr)
library(readr)
library(jsonlite)
library(writexl)
library(mapview)
library(osmdata)
library(ggplot2)
Semarang <- read.csv("Semarang.csv")
str(Semarang) #Cek struktur data setiap variabel
# SD
Fasilitas_SD <- read_csv("Fasilitas SD.csv")
Fasilitas_SD <- Fasilitas_SD %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SD_clean <- Fasilitas_SD[complete.cases(Fasilitas_SD$latitude), ]
Fasilitas_SD_clean_filtered <- Fasilitas_SD_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMP
Fasilitas_SMP <- read_csv("Fasilitas SMP.csv")
Fasilitas_SMP <- Fasilitas_SMP %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMP_clean <- Fasilitas_SMP[complete.cases(Fasilitas_SMP$latitude), ]
Fasilitas_SMP_clean_filtered <- Fasilitas_SMP_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
# SMA
Fasilitas_SMA <- read_csv("Fasilitas SMA.csv")
Fasilitas_SMA <- Fasilitas_SMA %>%
mutate(
longitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[1]  # Longitude
}),
latitude = sapply(.geo, function(x) {
coords <- fromJSON(x)$coordinates
coords[2]  # Latitude
})
)
Fasilitas_SMA_clean <- Fasilitas_SMA[complete.cases(Fasilitas_SMA$latitude), ]
Fasilitas_SMA_clean_filtered <- Fasilitas_SMA_clean %>%
filter(Kab_Kota %in% c("Kota Semarang", "Kab. Semarang"))
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
jarak_terdekat <- function(fasilitas, nama_fasilitas) {
data_kosong <- data.frame(
sekolah = character(nrow(Semarang)),
lat = numeric(nrow(Semarang)),
long = numeric(nrow(Semarang)),
dist = numeric(nrow(Semarang)),
stringsAsFactors = FALSE
)
# Mendefinisikan fungsi jarak Euclidean
euclidean_distance <- function(lat1, lon1, lat2, lon2) {
sqrt((lat1 - lat2)^2 + (lon1 - lon2)^2)
}
fasilitas_coords <- fasilitas %>%
select(latitude, longitude, nama_sekol)
# Loop untuk menghitung jarak dan menetapkan nilai pada data_kosong
for (i in 1:nrow(Semarang)) {
# Ambil lat dan long dari Tangerang Selatan
lat_sekolah <- Semarang$lat[i]
long_sekolah <- Semarang$lng[i]
# Menghitung jarak untuk semua fasilitas
fasilitas_coords <- fasilitas_coords %>%
mutate(dist = euclidean_distance(lat_sekolah, long_sekolah, latitude, longitude))
# Menemukan baris dengan jarak minimum
hsl <- fasilitas_coords %>%
filter(dist == min(dist))
# Menetapkan nilai pada data_kosong
data_kosong[i, "sekolah"] <- hsl$nama_sekol[1]
data_kosong[i, "lat"] <- hsl$latitude[1]
data_kosong[i, "long"] <- hsl$longitude[1]
data_kosong[i, "dist"] <- hsl$dist[1]
}
colnames(data_kosong) <- c("sekolah",
paste("lat", nama_fasilitas, sep = "_"),
paste("long", nama_fasilitas, sep = "_"),
paste("dis", nama_fasilitas, sep = "_"))
# Hasil
return(data_kosong)
}
SD <- jarak_terdekat(Fasilitas_SD_clean_filtered, "SD")
setwd("C:/Users/U728217/Desktop/2024Statistik")
setwd("C:/Users/U728217/Desktop/2024Statistik")
setwd("C:/Users/U728217/Desktop/2024Statistik")
